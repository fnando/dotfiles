#!/usr/bin/env bash
set -e

function exit_with_message() {
  echo $1
  exit 1
}

# Store variables that will be used later on.
git_email=$(git config --get --global user.email || echo '')
git_name=$(git config --get --global user.name || echo '')
git_signingkey=$(git config --get --global user.signingkey || echo '')

if [[ "$git_signingkey" != "" ]]; then
  git_gpgsign=true
else
  git_gpgsign=false
fi

# First, retrieve the zip file from Github.
# It will use wget or curl (whichever is defined.)
curl_available=$(command -v curl)
wget_available=$(command -v wget)
unzip_available=$(command -v unzip)

dotfiles_zip=/tmp/dotfiles-main.zip
dotfiles_dir="$(dirname $0)"
dotfiles_url=https://github.com/fnando/dotfiles/archive/main.zip
user_file_backup="/tmp/user_${RANDOM}.sh"

# Detect codename
if [[ "$(uname)" == "Darwin" ]]; then
  codename=osx
else
  codename=$(lsb_release --short --codename)
fi

if [[ "$unzip_available" = "" ]]; then
  exit_with_message "#=> Make sure you have the unzip command available"
fi

# Check if installation must be from local files. If not, download zip file
# and extract it to tmp directory.
if [[ ! -d "${dotfiles_dir}/files" ]]; then
  dotfiles_dir=/tmp/dotfiles-main

  echo "#=> Downloading $dotfiles_url to $dotfiles_zip"

  if [[ "$curl_available" != "" ]]; then
    curl -Ls -o $dotfiles_zip $dotfiles_url
  elif [[ "$wget_available" != "" ]]; then
    wget -q -O $dotfiles_zip $dotfiles_url
  else
    exit_with_message "#=> Please make sure curl or wget is installed"
  fi

  [ -f "$dotfiles_zip" ] || exit_with_message "#=> ERROR: Couldn't download ${dotfiles_url}."

  # Now, unzip the directory
  rm -rf $dotfiles_dir
  unzip -q $dotfiles_zip -d /tmp
fi

shell_name="zsh"
user_file=$HOME/.${shell_name}/user.sh

# Make a backup copy of an existing .${shell_name}/user.sh
if [[ -f "${HOME}/.${shell_name}/user.sh" ]]; then
  echo -n "#=> Backing up ${user_file}... "
  cp "$user_file" "$user_file_backup"
  echo "OK"
fi

# Copy files
find ${dotfiles_dir}/files/home -maxdepth 1 -mindepth 1 -exec cp -R "{}" $HOME/ \;
cp -R ${dotfiles_dir}/files/.${shell_name} $HOME/
find ${dotfiles_dir}/files/common -maxdepth 1 -mindepth 1 -exec cp -R "{}" $HOME/.${shell_name} \;

for filename in $(ls -A $dotfiles_dir/files/install); do
  source_path="$dotfiles_dir/files/install/$filename"
  target_path="$HOME/$filename"

  if [[ ! -f "$target_path" ]]; then
    echo -n "#=> Copying $filename... "
    cp "$source_path" "$target_path"
    echo "OK"
  fi
done

# Restore .${shell_name}/user.sh backup copy
if [[ -f $user_file_backup ]]; then
  echo -n "#=> Restoring $user_file... "
  cp "$user_file_backup" "$user_file"
  echo "OK"

  echo -n "#=> Setting $user_file permission to 0600... "
  chmod 0600 $user_file
  echo "OK"
fi

# Source init file
source $HOME/.zsh/exports.sh

# Set up local directory
mkdir -p $HOME/local
[ -x "/usr/bin/chflags" ] && chflags hidden $HOME/local

# Copy binaries to ~/local/bin
echo -n "#=> Copying binaries... "
cp -R $dotfiles_dir/files/bin $HOME/local
find $HOME/local/bin -type f -exec chmod +x {} \;
echo "OK"

# Clone vundle.
if [[ ! -d "$HOME/.vim/bundle/vundle" ]]; then
  echo -n "#=> Cloning vim's vundle plugin... "
  git clone https://github.com/gmarik/vundle.git $HOME/.vim/bundle/vundle &> /dev/null
  echo "OK"
fi

# Set up SSH.
chmod 700 ~/.ssh
chmod 600 ~/.ssh/config
mkdir -p ~/.ssh/controlmaster
chmod 700 ~/.ssh/controlmaster

# Write git config
echo -n "#=> Setting Git information... "
[ "" != "$git_name" ] && git config --global user.name "$git_name"
[ "" != "$git_email" ] && git config --global user.email "$git_email"
[ "" != "$git_signingkey" ] && git config --global user.signingkey "$git_signingkey"
git config --global commit.gpgsign $git_gpgsign
echo "OK"

# Set up zsh-plugins
mkdir -p ~/.zsh-plugins
for plugin in $(cat $HOME/.default-zsh-plugins); do
  target_dir="$HOME/.zsh-plugins/$(basename $plugin)"

  if [[ ! -d "$target_dir" ]]; then
    echo -n "#=> Installing $plugin... "
    git clone --quiet "https://github.com/$plugin.git" "$target_dir"
    echo "OK"
  fi
done

# Set up launch agents
mkdir -p ~/Library/LaunchAgents
for agent in $(ls $dotfiles_dir/files/LaunchAgents); do
  source_file="$dotfiles_dir/files/LaunchAgents/$(basename $agent)"
  target_file="$HOME/Library/LaunchAgents/$(basename $agent)"

  if [[ -f "$target_file" ]]; then
    echo "#=> Unload $target_file"
    launchctl unload "$target_file"
  fi

  echo "#=> Copy $agent to ~/Library/LaunchAgents"
  cp "$source_file" "$target_file"

  echo "#=> Load $target_file"
  launchctl load "$target_file"
done

echo '#=> Done! Restart your terminal!'
