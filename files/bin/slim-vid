#!/usr/bin/env ruby
# frozen_string_literal: true

require "fileutils"
require "securerandom"
require "active_support"
require "optparse"
require "shellwords"

helpers = Object.new.extend(ActiveSupport::NumberHelper)
keep_audio = false
verbose = false

OptionParser.new do |parser|
  parser.banner = "Usage: #{$PROGRAM_NAME} [options]"

  parser.on("-a", "--audio", "Keep audio track") do |value|
    keep_audio = value
  end

  parser.on("-v", "--verbose", "Verbose output") do |value|
    verbose = value
  end
end.parse!

input = ARGV.first

if !input || !File.file?(input)
  puts "ERROR: Please provide a valid video file"
  exit 1
end

input = File.expand_path(input)
name = File.basename(input, ".*")
dir = File.dirname(input)
ext = File.extname(input)
id = SecureRandom.hex(10)
output = File.join(dir, "#{name}.#{id}#{ext}")
cmd = [
  "ffmpeg",
  verbose ? nil : ["-loglevel", "quiet"],
  "-i", input,
  keep_audio ? nil : "-an",
  output
].flatten.compact

cmd_str = cmd.map {|arg| Shellwords.escape(arg) }.join(" ")
puts "=> Command: #{cmd_str}"

system(*cmd)

original_size = File.size(input)
slim_size = File.size(output)

puts "Original file: #{helpers.number_to_human_size(original_size)}"
puts "Slim file: #{helpers.number_to_human_size(slim_size)}"

FileUtils.move(input, File.join(dir, "#{name}.original.#{id}.#{ext}"))
FileUtils.move(output, input)
